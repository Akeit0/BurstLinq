<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var types = new string[]
    {
        "byte", "sbyte", "short", "ushort", "int", "uint", "long", "ulong", "float", "double"
    };

    string V256Name(string type) {
        switch (@type) {
            case "sbyte": return "SByte";
            case "byte": return "Byte";
            case "short": return "SShort";
            case "ushort": return "UShort";
            case "int": return "SInt";
            case "uint": return "UInt";
            case "long": return "SLong";
            case "ulong": return "ULong";
            case "float": return "Float";
            case "double": return "Double";
        }
        throw new Exception("Invalid type");
    }
    int Size(string type) {
        switch (@type) {
            case "sbyte": return 1;
            case "byte": return 1;
            case "short": return 2;
            case "ushort": return 2;
            case "int": return 4;
            case "uint": return 4;
            case "long": return 8;
            case "ulong": return 8;
            case "float": return 4;
            case "double": return 8;
        }
        throw new Exception("Invalid type");
    }
    bool IsFloat(string type) {
        return type is "float" or "double";
    }
#>
using Unity.Burst;
using Unity.Burst.CompilerServices;
using Unity.Burst.Intrinsics;
using static Unity.Burst.Intrinsics.X86.Avx;
using static Unity.Burst.Intrinsics.X86.Avx2;
using Unity.Collections;
using Unity.Collections.LowLevel.Unsafe;
using Unity.Mathematics;

namespace BurstLinq
{  

    public unsafe static partial class BurstLinqExtensions
    {
<# foreach(var type in types) { #>
         public static <#=type#> Max(this NativeList<<#=type#>> source)
        {
            Error.ThrowIfEmpty(source.Length);
            MaxCore(source.GetUnsafePtr(), source.Length, out var result);
            return result;
        }

        public static <#=type#> Max(this NativeSlice<<#=type#>> source)
        {
            Error.ThrowIfEmpty(source.Length);
            MaxCore((<#=type#>*)source.GetUnsafePtr(), source.Length, out var result);
            return result;
        }

        public static <#=type#> Max(this NativeArray<<#=type#>> source)
        {
            Error.ThrowIfEmpty(source.Length);
            MaxCore((<#=type#>*)source.GetUnsafePtr(), source.Length, out var result);
            return result;
        }

        [BurstCompile]
        internal static void MaxCore(<#=type#>* ptr, [AssumeRange(1, int.MaxValue)] int length, out <#=type#> result)
        {
             static <#=type#> _max(<#=type#> a, <#=type#> b) =><# if (IsFloat(type)) {#> IsNeonSupported?math.max(a,b): a > b ? a : b;<#}else  { #>  a > b ? a : b;<# } #>

            static v256 _v_max(v256 a, v256 b) => new v256(
<#  int vectorLength=32/Size(type);
    string typeName = V256Name(type);#>
<# for (int i =0;i<vectorLength-1;i++) {#>
                _max(a.<#=typeName+i#>, b.<#=typeName+i#>),
<# } #>
                _max(a.<#=typeName+(vectorLength-1)#>, b.<#=typeName+(vectorLength-1)#>)
            );
            var tempResult = <#=type#>.MinValue;
            var packingLength = sizeof(v256) / sizeof(<#=type#>);
            var temp = new v256(<#=type#>.MinValue);
            var packedLength = length / (packingLength);
            if(0<packedLength) {
                var ptrAs256 = (v256*) ptr;
                for (int i = 0; i < packedLength; i++) {
                    temp = _v_max(temp, ptrAs256[i]);
                }
                <#=type#>* tempAsArray = (<#=type#>*) &temp;
                for (int i = 0; i < packingLength; i++) {
                    tempResult = _max(tempResult, tempAsArray[i]);
                }
            }
            for (var index = packedLength * packingLength; index < length; index++) {
                tempResult = _max(tempResult, ptr[index]);
            }
            result =  tempResult;
        }
<# } #>
    }
}