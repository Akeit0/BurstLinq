<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var types = new string[]
    {
        "byte", "sbyte", "short", "ushort", "int", "uint", "long", "ulong", "float", "double",
        "Vector2", "Vector2Int", "Vector3", "Vector3Int", "Vector4",
        "int2", "int3", "int4",
        "uint2", "uint3", "uint4",
        "float2", "float3", "float4",
        "double2", "double3", "double4",
    };

    bool IsPrimitiveAndVectorSupported(string type)
    {
        return type is "int" or "uint" or "float" or "double";
    }
#>
using Unity.Burst;
using Unity.Burst.CompilerServices;
using Unity.Collections;
using Unity.Collections.LowLevel.Unsafe;
using Unity.Mathematics;
using UnityEngine;

namespace BurstLinq
{
    public unsafe static partial class BurstLinqExtensions
    {
<# foreach(var type in types) { #>
        public static bool SequenceEqual(this NativeList<<#=type#>> first, NativeList<<#=type#>> second)
        {
            if (first.Length != second.Length) return false;
            return SequenceEqualCore(first.GetUnsafePtr(), second.GetUnsafePtr(), first.Length);
        }

        public unsafe static bool SequenceEqual(this NativeSlice<<#=type#>> first, NativeSlice<<#=type#>> second)
        {
            if (first.Length != second.Length) return false;
            return SequenceEqualCore((<#=type#>*)first.GetUnsafePtr(), (<#=type#>*)second.GetUnsafePtr(), first.Length);
        }

        public static bool SequenceEqual(this NativeArray<<#=type#>> first, NativeArray<<#=type#>> second)
        {
            if (first.Length != second.Length) return false;
            return SequenceEqualCore((<#=type#>*)first.GetUnsafePtr(), (<#=type#>*)second.GetUnsafePtr(), first.Length);
        }

<#if (IsPrimitiveAndVectorSupported(type)) { #>
        [BurstCompile]
        internal static bool SequenceEqualCore(<#=type#>* firstPtr, <#=type#>* secondPtr, [AssumeRange(0, int.MaxValue)] int length)
        {
            var index = 0;
            var l = length / 4;
            for (; index < l; index += 4)
            {
                var c = *(<#=type#>4*)(firstPtr + index) == *(<#=type#>4*)(secondPtr + index);
                if (!math.all(c)) return false;
            }

            for (; index < length; index++)
            {
                if (!firstPtr[index].Equals(secondPtr[index])) return false;
            }

            return true;
        }
<#} else { #>
        [BurstCompile]
        internal unsafe static bool SequenceEqualCore(<#=type#>* firstPtr, <#=type#>* secondPtr, [AssumeRange(0, int.MaxValue)] int length)
        {
            for (int i = 0; i < length; i++)
            {
                if (!firstPtr[i].Equals(secondPtr[i])) return false;
            }
            return true;
        }
<# } #>

<# } #>
    }
}