<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var types = new string[]
    {
        "byte", "sbyte", "short", "ushort", "int", "uint", "long", "ulong", "float", "double",
        "Vector2", "Vector2Int", "Vector3", "Vector3Int", "Vector4",
        "int2", "int3", "int4",
        "uint2", "uint3", "uint4",
        "float2", "float3", "float4",
        "double2", "double3", "double4",
    };
#>
using Unity.Burst;
using Unity.Burst.CompilerServices;
using Unity.Collections;
using Unity.Collections.LowLevel.Unsafe;
using Unity.Mathematics;
using UnityEngine;

namespace BurstLinq
{
    public unsafe static partial class BurstLinqExtensions
    {
<# foreach(var type in types) { #>
        public static bool Contains(this NativeList<<#=type#>> source, <#=type#> value)
        {
            return ContainsCore(source.GetUnsafePtr(), source.Length, value);
        }

        public unsafe static bool Contains(this NativeSlice<<#=type#>> source, <#=type#> value)
        {
            return ContainsCore((<#=type#>*)source.GetUnsafePtr(), source.Length, value);
        }

        public static bool Contains(this NativeArray<<#=type#>> source, <#=type#> value)
        {
            return ContainsCore((<#=type#>*)source.GetUnsafePtr(), source.Length, value);
        }

        [BurstCompile]
        internal unsafe static bool ContainsCore(<#=type#>* ptr, [AssumeRange(0, int.MaxValue)] int length, in <#=type#> value)
        {
            for (int i = 0; i < length; i++)
            {
                if (ptr[i].Equals(value)) return true;
            }

            return false;
        }

<# } #>
    }
}